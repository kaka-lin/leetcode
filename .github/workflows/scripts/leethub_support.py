"""
Move the directories generated by [LeetHub](https://github.com/QasimWani/LeetHub)
to the 'leetcode' directory, with the question number is added as prefix.
"""
import re
import json
import shutil
import logging
from pathlib import Path
from typing import List, Dict, Tuple

IGNORE_DIR = ['leetcode', 'others', 'old']
WORKDIR = Path('.')
LEETCODE_DIR = WORKDIR / 'leetcode'
SCRIPTS_DIRECTORY = WORKDIR / '.github/workflows/scripts'
EXISTING_QUESTIONS = LEETCODE_DIR.glob('*')

# icons are provided by [devicon](https://devicon.dev).
ICONS = json.loads((SCRIPTS_DIRECTORY / 'lang_suffix_to_icon.json').read_bytes())

QUESTION_BASE_URL = 'https://leetcode.com/problems'


def parse_leetcode_info(question_directory: Path) -> Tuple[bool, str]:
    """ Parse Leetcode question info from the README generated by LeetHub."""
    readme_path: Path = question_directory / 'README.md'
    if not readme_path.exists() or not readme_path.is_file():
        return False, {}

    pattern = r'^<h2><a href="https://leetcode\.com/problems/(.*)[//]+">(\d+)\. (.*)</a></h2><h3>(.*)</h3>.*'
    matched: re.Match = re.search(pattern, readme_path.read_text())
    if matched:
        tag = matched.groups()[0]
        number = matched.groups()[1].zfill(5)
        title = matched.groups()[2]
        difficulty = matched.groups()[3]
        url = f"{QUESTION_BASE_URL}/{tag}/"

        info = {
            "tag": tag,
            "number": number,
            "title": title,
            "difficulty": difficulty,
            "url": url
        }

        return (True, info)

    return (False, {})


# loop over root folder and
# remove all questions to leetcode folder
def move_question_directoy():
    logging.info(f"Moving submitted solutions to {LEETCODE_DIR}...")
    for path in WORKDIR.glob('*'):
        if path.is_file():
            continue
        if path.name in IGNORE_DIR or path.name.startswith('.'):
            continue

        ok, info = parse_leetcode_info(path)
        if not ok:
            continue

        leetcode_number = info["number"]
        leetcode_tag = info["tag"]
        dest_dir = LEETCODE_DIR / f"{leetcode_number}_{leetcode_tag}"
        if dest_dir.exists():
            for src in path.glob('*'):
                # ignore `NOTES.md`, because its an empty file
                if src.name == "NOTES.md":
                    continue

                dest_file = dest_dir / src.name
                if dest_file.exists():
                    dest_file.unlink()
                src.rename(dest_file)
            shutil.rmtree(path)
            logging.info(f"Moved all files in {path} as {dest_dir}")
        else:
            path.rename(dest_dir)


def get_question_info(questions: List[dict], level_count: Dict) -> int:
    total = 0
    for path in LEETCODE_DIR.glob('*'):
        ok, info = parse_leetcode_info(path)
        if not ok:
            continue

        leetcode_tag = info["tag"]
        for sol in path.glob(f"*{leetcode_tag}.*"):
            info["solutions"] = [sol.suffix, sol]

        questions.append(info)
        level_count[info["difficulty"].lower()] += 1
        total += 1

    questions.sort(key=lambda q: q['number'])
    return total


def build_readme_table(questions: List[dict]) -> str:
    md_table = "| # | Title | Solutions | Difficulty |\n" + \
        "| - | - | - | - |\n"
    for q in questions:
        anchored_title = f"[{q['title']}]({q['url']})"
        solution_links = f"<a href='{q['solutions'][1]}'><img src='{ICONS[q['solutions'][0]]}' width='20' height='20'></a>"
        md_table += f"| {q['number']} | {anchored_title} " + \
            f"| {solution_links} | {q['difficulty']} |\n"
    return md_table


def main():
    LEETCODE_DIR.mkdir(exist_ok=True)
    questions = []
    level_count = {'easy': 0, 'medium': 0, 'hard': 0}

    # mapping from raw question name to name with number as prefix
    #existing_q_mapping = {q.name.split('_')[-1]: q.name for q in EXISTING_QUESTIONS}

    # loop over root folder and remove all questions to leetcode folder
    move_question_directoy()

    # loop over leetcode folder and get useful info
    # like: question_url and difficulty ...
    total = get_question_info(questions, level_count)

    # build the readme table for showing leetcode
    md_table = build_readme_table(questions)
    with open(SCRIPTS_DIRECTORY / 'README.md.tpl', 'r') as template, \
            open('README.md', 'w') as output:
        template_string = template.read()
        content = template_string.format(leetcode=md_table, total=total, **level_count)
        output.write(content)
    logging.info("Done updating README.md")


if __name__ == "__main__":
    main()
